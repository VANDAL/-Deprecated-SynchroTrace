SYNCHROTRACE:

There are two tools which together form the prototype SynchroTrace simulation flow built into Gem5.
	1) Sigil - Multi-threaded Trace Capture Tool
	2) Replay - Event-Trace Replay Framework

This code base includes (2) Replay.
	
The logical steps to using this simulation environment for design space exploration or CMP simulation is as follows:
	1)
	  a) Generate Multi-threaded Event Traces for the program binary you are testing (See Sigil documentation for further information):
		a) Use the Sigil wrapping script (runsigil_and_gz_newbranch.py) with necessary options on your binary
	   OR
	  b) Use previously generated or sample traces
	2) Compile SynchroTrace
	3) Run SynchroTrace with necessary options on the generated traces
	
Simulating FFT with SynchroTrace (Using Pre-generated Traces):

1) Compile SynchroTrace using SConscript:

  a) Go to the base SynchroTrace directory
  b) Run the following command (Note that the number of jobs refers to the number of cores available for compilation):
     
     scons build/X86_MESI_CMP_directory/gem5.opt --jobs=6

2) Run SynchroTrace on the 8-thread traces of FFT:

  a) Go to the base SynchroTrace directory
  b) Run the following script:

  run_synchrotrace_fft.pl


Additional Notes:

1) Sample Sigil Traces are located in $BASESYNCHROTRACEDIR/sample_sigil_traces

2) SynchroTrace configurations are located in $BASESYNCHROTRACEDIR/configs/synchrotrace/synchrotrace.py

3) If you look into the run_synchrotrace_fft.pl run script, there is a section for debug flags. The following is a list of the available debug flags used by SynchroTrace with brief descriptions.

DebugFlag('mutexLogger') - Prints order of threads obtaining mutex lock
DebugFlag('printEvent') - Prints EventID# for specific thread before/after event started/completed. This debug flag makes the simulation time very slow.
DebugFlag('printEventFull') - Prints EventIDs for Threads, Threads on what Cores every 50k cycles
DebugFlag('cacheMiss') - Prints out cache misses as they happen and address 
DebugFlag('memoryInBarrier') - prints memory reads, writes, read bytes, write bytes every barrier
DebugFlag('flitsInBarrier') - prints flits generated every barrier
DebugFlag('l1MissesInBarrier') - prints l1 misses per thread every barrier
DebugFlag('latencyInBarrier') - prints 3 lines. # packets in barrier, Accumulated queueing delay in barrier, Accumulated network latency in Barrier.
DebugFlag('powerStatsInBarrier') - prints the total router power specifically for that barrier, i.e. not a rolling average.
DebugFlag('roi') - Prints out the cycle when we reach the parallel region in Debate. Prints out when the threads all join up.
DebugFlag('netMessages') - Prints the network packet messages out at 10k cycle buckets.
DebugFlag('amTrace') - Original default debug flag. 
